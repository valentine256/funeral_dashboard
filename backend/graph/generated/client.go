// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package generated

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	"gitlab.com/icarmenjm/pos_network_server/graph/model"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type QueryRoot struct {
	Order          []*model.Order       "json:\"order\" graphql:\"order\""
	OrderAggregate model.OrderAggregate "json:\"order_aggregate\" graphql:\"order_aggregate\""
	OrderByPk      *model.Order         "json:\"order_by_pk\" graphql:\"order_by_pk\""
}
type MutationRoot struct {
	DeleteOrder     *model.OrderMutationResponse "json:\"delete_order\" graphql:\"delete_order\""
	DeleteOrderByPk *model.Order                 "json:\"delete_order_by_pk\" graphql:\"delete_order_by_pk\""
	InsertOrder     *model.OrderMutationResponse "json:\"insert_order\" graphql:\"insert_order\""
	InsertOrderOne  *model.Order                 "json:\"insert_order_one\" graphql:\"insert_order_one\""
	UpdateOrder     *model.OrderMutationResponse "json:\"update_order\" graphql:\"update_order\""
	UpdateOrderByPk *model.Order                 "json:\"update_order_by_pk\" graphql:\"update_order_by_pk\""
}
type MyMutation struct {
	DeleteOrderByPk *struct {
		ID       string  "json:\"id\" graphql:\"id\""
		Name     *string "json:\"name\" graphql:\"name\""
		Quantity int     "json:\"quantity\" graphql:\"quantity\""
	} "json:\"delete_order_by_pk\" graphql:\"delete_order_by_pk\""
}
type MyQuery struct {
	Order []*struct {
		ID       string  "json:\"id\" graphql:\"id\""
		Name     *string "json:\"name\" graphql:\"name\""
		Quantity int     "json:\"quantity\" graphql:\"quantity\""
	} "json:\"order\" graphql:\"order\""
}

const MyMutationDocument = `mutation MyMutation ($id: uuid!) {
	delete_order_by_pk(id: $id) {
		id
		name
		quantity
	}
}
`

func (c *Client) MyMutation(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*MyMutation, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res MyMutation
	if err := c.Client.Post(ctx, "MyMutation", MyMutationDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const MyQueryDocument = `query MyQuery {
	order {
		id
		name
		quantity
	}
}
`

func (c *Client) MyQuery(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*MyQuery, error) {
	vars := map[string]interface{}{}

	var res MyQuery
	if err := c.Client.Post(ctx, "MyQuery", MyQueryDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
